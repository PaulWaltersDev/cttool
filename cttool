#!/usr/bin/env node

/*
 * CtTool
 * Desc: Searches Certificate Transparency services for hostnames linked to certificates.
 * Author: Carey Li (https://github.com/cry)
 */

 "use strict";

const VERSION = '0.0.2';

let googleCT = require("./lib/ct/googleCT.js"),
	//dns = require("./lib/dns/resolve.js"),
	program = require('commander'),
	Promise = require('bluebird'),
	fs = Promise.promisifyAll(require('fs')),
	log = (require('log4js')).getLogger('Main'),
	hl = require('colors'),
	util = require('util');

log.info(util.format("Certificate Transparency tool %s\n", VERSION));

program
	.version(VERSION)
	//.option('-c, --ct-server <server>', 'specify which ct service to use (default Google)')
	.option('-f, --file <file>', 'save hostnames to file as JSON [res.json]', 'res.json')
	.option('-c, --check', 'check discovered hostnames against dns')

program
	.command('discover <hostname>')
	.description('scan Certificate Transparency logs for subdomains of hostname')
	.action((hostname) => {
		googleCT.getHostnames(hostname)
			.then((res) => {

				if (program.file !== undefined) {
					fs.writeFile(program.file, JSON.stringify(res));
				};

				if (!program.check) {
					console.log('\nUnique hostnames:\n'.bold)
					res.forEach((l) => {
						console.log("> " + l)
					})
				};

				let exec = require('child_process').exec;

				console.log('\nChecking if hosts have a valid DNS entry..'.bold)
				if (program.file) console.log(util.format('This may take a while, meanwhile raw domain list has been written to %s\n'.bold, program.file))

				res.forEach((l, ind) => {
					if (~l.indexOf('*.')) {
						console.log(util.format("> %s", l).red);
						return;
					};

					exec(util.format("dig +short '%s'", l.replace(/(["\s'$`\\])/g,'\\$1')), (err, stdout, stderr) => {
						if (stdout === "") {
							console.log(util.format("> %s - no dns found", l).red);
							return;
						};

						let d = stdout.split('\n');
						d.pop()

						console.log(util.format("> %s - %s", l.green, d.join(' -> ').green));
					});
				});

			})
			.catch(() => {});
	});

program.parse(process.argv);

if (!process.argv.slice(2).length) {
	program.outputHelp();
	return;
}